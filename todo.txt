
0. To detect logout links:
   a. Find pattern (case insensitive)logout, signout, log_out, sign_out in 
      <a>'s href or <form>'s action.
   b. If nothing is found then go for text pattern search (for some like google)
      point-a would not work  
0. To detect correct logout/login, first,
   - find out which links are actually logout links.
   - hook into them when they are visible.
   - trigger a logout event once that happens.
1. To test it, use dropbox, github.
   And also from database sites for which pwd_group is not 'no group'
   but tts_loggedin is zero.
1. Cookies should not remember the top level domain path.
   They should remember entire domain name.
2. To use tld.getDomain(), use following:
   DONT warn user about password reuse if the tld.getDomain() is same.
   However, dont use that to store cookies.
1. When I send the current_report, check which sites
   have the status "am_i_logged_in" to "yes".
   Copy all those sites to newly initialized current_report.
   Do same for "username".
2. When I detect successful log-in, set "am_i_logged_in" in both
   current_report and aggregate_data to true for that site.
3. Would I be also required to copy the sites where I am loggedin
   currently in total_site_list after sending the report?
4. To detect successful logout:
   a. cookies.
   b. more correcter detection of logout links.
      - See if there is a logout link very close to
      detection of logout.
      - Hook into elements change in visibility.
5. After every page load, if there is a logout link
   present then the sign-in-status is sent as true.
   In that case, the password_unchanged_duration 
   is updated once again. STOP THAT.
   Also, if_pi_fetch_is_required is executed
   whne that happens. STOP THAT.

   Now I have a successful-logg-in event detected.
   (as well as logout event detected).
   Move all that functionality in those cases.
